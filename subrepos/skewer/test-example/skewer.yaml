title: Skupper Hello World
subtitle: A minimal HTTP application deployed across Kubernetes clusters using Skupper
github_actions_url: https://github.com/skupperproject/skewer/actions/workflows/main.yaml
overview: |
  This example is a very simple multi-service HTTP application that can
  be deployed across multiple Kubernetes clusters using Skupper.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hello from <pod-name>
    (<request-count>)`.

  * A frontend service that accepts HTTP requests, calls the backend
    to fetch new greetings, and serves them to the user.

  With Skupper, you can place the backend in one cluster and the
  frontend in another and maintain connectivity between the two
  services without exposing the backend to the public internet.

  <img src="images/entities.svg" width="640"/>
prerequisites: !string prerequisites
sites:
  west:
    kubeconfig: ~/.kube/config-west
    namespace: west
  east:
    kubeconfig: ~/.kube/config-east
    namespace: east
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - standard: link_your_namespaces
  - title: Deploy the frontend and backend services
    preamble: |
      Use `kubectl create deployment` to deploy the frontend service
      in `west` and the backend service in `east`.
    commands:
      west:
        - run: kubectl create deployment frontend --image quay.io/skupper/hello-world-frontend
          await: [deployment/frontend]
      east:
        - run: kubectl create deployment backend --image quay.io/skupper/hello-world-backend
          await: [deployment/backend]
  - title: Expose the backend service
    preamble: |
      We now have two namespaces linked to form a Skupper network, but
      no services are exposed on it.  Skupper uses the `skupper
      expose` command to select a service from one namespace for
      exposure on all the linked namespaces.

      Use `skupper expose` to expose the backend service to the
      frontend service.
    commands:
      east:
        - run: skupper expose deployment/backend --port 8080
          output: |
            NAME       TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)          AGE
            backend    ClusterIP      10.106.92.175    <none>           8080/TCP         1m31s
  - title: Expose the frontend service
    preamble: |
      We have established connectivity between the two namespaces and
      made the backend in `east` available to the frontend in `west`.
      Before we can test the application, we need external access to
      the frontend.

      Use `kubectl expose` with `--type LoadBalancer` to open network
      access to the frontend service.  Use `kubectl get services` to
      check for the service and its external IP address.
    commands:
      west:
        - run: kubectl expose deployment/frontend --port 8080 --type LoadBalancer
          await_external_ip: [service/frontend]
          output: |
            service/frontend exposed
        - run: kubectl get services
          output: |
            NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)                           AGE
            backend                ClusterIP      10.102.112.121   <none>           8080/TCP                          30s
            frontend               LoadBalancer   10.98.170.106    10.98.170.106    8080:30787/TCP                    2s
            skupper                LoadBalancer   10.101.101.208   10.101.101.208   8080:31494/TCP                    82s
            skupper-router         LoadBalancer   10.110.252.252   10.110.252.252   55671:32111/TCP,45671:31193/TCP   86s
            skupper-router-local   ClusterIP      10.96.123.13     <none>           5671/TCP                          86s
  - standard: test_the_application
summary: |
  This example locates the frontend and backend services in different
  namespaces, on different clusters.  Ordinarily, this means that they
  have no way to communicate unless they are exposed to the public
  internet.

  Introducing Skupper into each namespace allows us to create a virtual
  application network that can connect services in different clusters.
  Any service exposed on the application network is represented as a
  local service in all of the linked namespaces.

  The backend service is located in `east`, but the frontend service
  in `west` can "see" it as if it were local.  When the frontend
  sends a request to the backend, Skupper forwards the request to the
  namespace where the backend is running and routes the response back to
  the frontend.

  <img src="images/sequence.svg" width="640"/>
cleaning_up:
  preamble: !string cleaning_up_preamble
  commands:
    west:
      - run: skupper delete
      - run: kubectl delete service/frontend
      - run: kubectl delete deployment/frontend
    east:
      - run: skupper delete
      - run: kubectl delete deployment/backend
next_steps: !string next_steps
