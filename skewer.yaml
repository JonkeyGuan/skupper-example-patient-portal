title: Patient Portal with PostgreSQL and Skupper
subtitle: A simple database-backed web application that runs in the public cloud but keeps its data in a private database
github_actions_url: https://github.com/ssorj/skupper-example-patient-portal/actions/workflows/main.yaml
overview: |
  This example is a simple database-backed web application that shows
  how you can use Skupper to access a database at a remote site
  without exposing it to the public internet.

  It contains three services:

    * A PostgreSQL database running on a bare-metal or virtual
      machine in a private data center.

    * A payment-processing service running on Kubernetes in a private
      data center.

    * A web frontend service running on Kubernetes in the public
      cloud.  It uses the PostgreSQL database and the
      payment-processing service.

  This example uses two Kubernetes namespaces, "private" and "public",
  to represent the private Kubernetes cluster and the public cloud.
prerequisites: !string prerequisites
sites:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - title: Link your namespaces
    preamble: !string link_your_namespaces_preamble
    commands:
      public:
        - run: skupper token create ~/secret.token
      private:
        - run: skupper link create ~/secret.token
    postamble: !string link_your_namespaces_postamble
  - title: Deploy and expose the database
    preamble: |
      Use `docker` to run the database service on your machine.  In
      the public namespace, use the `skupper gateway expose` command
      to expose the database on the Skupper network.

      Use `kubectl get service/database` to ensure the database
      service is available.
    commands:
      public:
        - run: docker run --detach --rm -p 5432:5432 quay.io/ssorj/patient-portal-database
        - run: skupper gateway expose database localhost 5432 --type docker
          await: [service/database]
        - run: kubectl get service/database
          output: |
            NAME       TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
            database   ClusterIP   10.104.77.32   <none>        5432/TCP   15s
  - title: Deploy and expose the payment processor
    preamble: |
      In the private namespace, use the `kubectl apply` command to
      deploy the payment processor service.  Use the `skupper expose`
      command to expose the service on the Skupper network.

      In the public namespace, use `kubectl get service/payment-processor` to
      check that the `payment-processor` service appears after a
      moment.
    commands:
      private:
        - run: kubectl apply -f payment-processor/kubernetes.yaml
          await: [deployment/payment-processor]
        - run: skupper expose deployment/payment-processor --port 8080
      public:
        - run: echo
          apply: test
          await: [service/payment-processor]
        - run: kubectl get service/payment-processor
          output: |
            NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
            payment-processor   ClusterIP   10.103.227.109   <none>        8080/TCP   1s
  - title: Deploy the frontend
    preamble: |
      In the public namespace, use the `kubectl apply` command to
      deploy the frontend service.  This also sets up an external load
      balancer for the frontend.
    commands:
      public:
        - run: kubectl apply -f frontend/kubernetes.yaml
          await_external_ip: [service/frontend]
  - title: Test the application
    preamble: |
      Now we're ready to try it out.  Use `kubectl get
      service/frontend` to look up the external IP of the frontend
      service.  Then use `curl` or a similar tool to request the
      `/api/health` endpoint at that address.

      **Note:** The `<external-ip>` field in the following commands is
      a placeholder.  The actual value is an IP address.
    commands:
      public:
        - run: kubectl get service/frontend
          apply: readme
          output: |
            NAME       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)          AGE
            frontend   LoadBalancer   10.103.232.28   <external-ip>   8080:30407/TCP   15s
        - run: "curl http://<external-ip>:8080/api/health"
          apply: readme
          output: |
            OK
        - run: "curl --fail --verbose --retry 60 --retry-connrefused --retry-delay 1 $(kubectl get service/frontend -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:8080/api/health')"
          apply: test
    postamble: |
      If everything is in order, you can now access the web interface
      by navigating to `http://<external-ip>:8080/` in your browser.
cleaning_up:
  preamble: !string cleaning_up_preamble
  commands:
    public:
      - run: skupper gateway delete
      - run: skupper delete
      - run: kubectl delete service/frontend
      - run: kubectl delete deployment/frontend
    private:
      - run: skupper delete
      - run: kubectl delete deployment/payment-processor
next_steps: !string next_steps
