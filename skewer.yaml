title: Patient Portal with PostgreSQL and Skupper
subtitle: A simple database-backed web application that runs in the public cloud but keeps its data in a private database
github_actions_url: https://github.com/ssorj/skupper-example-patient-portal/actions/workflows/main.yaml
overview: |
  This example is a simple database-backed web application that shows
  how you can use Skupper to access a database at a remote site
  without exposing it to the public internet.

  It contains three services:

    * A PostgreSQL database running on a bare-metal or virtual
      machine in a private data center.

    * A payment-processing service running on Kubernetes in a private
      data center.

    * A web frontend service running on Kubernetes in the public
      cloud.  It uses the PostgreSQL database and the
      payment-processing service.

  This example uses two Kubernetes namespaces, "private" and "public",
  to represent the private Kubernetes cluster and the public cloud.
prerequisites: !string prerequisites
sites:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - title: Link your namespaces
    preamble: !string link_your_namespaces_preamble
    commands:
      public:
        - run: skupper token create ~/secret.yaml
      private:
        - run: skupper link create ~/secret.yaml
        - run: skupper link status --wait 30
    postamble: !string link_your_namespaces_postamble
  - title: Deploy the database
    commands:
      public:
        - run: docker run --detach --rm -p 5432:5432 quay.io/ssorj/patient-portal-database
  - title: Expose the database
    commands:
      public:
        - run: skupper gateway expose database localhost 5432 --type docker
  - title: Deploy the payment processor
    commands:
      private:
        - run: kubectl apply -f payment-processor
  - title: Expose the payment processor
    commands:
      private:
        - run: skupper expose deployment/payment-processor --protocol http --port 8080
  - title: Deploy the frontend
    preamble: |
      Use `kubectl create deployment` to deploy the frontend service
      in `public`.
    commands:
      public:
        - run: kubectl apply -f frontend
          await: [deployment/frontend]
        - run: "curl --fail --verbose --retry 60 --retry-connrefused --retry-delay 1 $(kubectl get service/frontend -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:8080/')"
          apply: test
  - title: Expose the frontend
  - title: Test the application
cleaning_up:
  preamble: !string cleaning_up_preamble
  commands:
    public:
      - run: skupper gateway delete
      - run: skupper delete
      - run: kubectl delete service/frontend
      - run: kubectl delete deployment/frontend
    private:
      - run: skupper delete
      - run: kubectl delete deployment/payment-processor
next_steps: !string next_steps
